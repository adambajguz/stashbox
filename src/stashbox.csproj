<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net40;net45;netstandard1.0;netstandard1.3;netstandard2.0</TargetFrameworks>
    <AssemblyName>Stashbox</AssemblyName>
    <AssemblyTitle>Stashbox</AssemblyTitle>
    <RootNamespace>Stashbox</RootNamespace>
    <PackageId>Stashbox</PackageId>
    <Authors>Peter Csajtai</Authors>
    <Company>Peter Csajtai</Company>
    <Product>Stashbox</Product>
    <Copyright>Copyright © Peter Csajtai 2020</Copyright>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageProjectUrl>https://github.com/z4kn4fein/stashbox</PackageProjectUrl>
    <PackageIcon>icon.png</PackageIcon>
    <RepositoryUrl>https://github.com/z4kn4fein/stashbox</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>Stashbox di dependencyinjection ioc dotnet netstandard</PackageTags>
    <Description>Stashbox is a lightweight, portable dependency injection framework for .NET based solutions.</Description>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>../sn.snk</AssemblyOriginatorKeyFile>
    <PublicSign Condition=" '$(OS)' != 'Windows_NT' ">true</PublicSign>
    <Version>1.0.0</Version>
    <PackageVersion>1.0.0</PackageVersion>
    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
    <DebugType>portable</DebugType>
    <LangVersion>latest</LangVersion>
    <PackageReleaseNotes>
      <![CDATA[
- Fix: Nested named resolution could cause stack overflow #74
- Fix: Improve support for Assemblies loaded into Collectible AssemblyLoadContexts #73
- Fix: Unknown type resolution does not work recursively #77
- Fix: Exception when building expressions #76
- Fix: Bad performance #79
- Fix: Expected override behaviour not working with scopes #80

Breaking changes:
- `WithUniqueRegistrationIdentifiers()` option has been removed, `WithRegistrationBehavior()` has been added instead.
- Circular dependency tracking is enabled now by default, for runtime tracking the renamed `WithRuntimeCircularDependencyTracking()` option can be used.
- `WithMemberInjectionWithoutAnnotation()` container configuration option has been renamed to `WithAutoMemberInjection()`.
- `SetImplementationType()` option has been added to the registration configuration used when unknown type detected.
- Removed the `GetScopedInstace()` method from the `IResolutionScope`, they are treated as expression overrides now and consumed automatically by the container.
- Lifetimes became stateless and their API has been changed, see the docs for more info (https://github.com/z4kn4fein/stashbox/wiki/Lifetimes).
- Lifetime validation has been added:
  - Tracking dependencies that has shorter life-span than their direct or indirect parent's.
  - Tracking scoped services resolved from root.
  - The container throws a LifetimeValidationFailedException when the validation fails.
- `PerRequestLifetime` has been renamed to `PerScopedRequestLifetime`.
- `RegisterInstanceAs()` has been removed, every functionality is available on the `RegisterInstance()` methods.
- Service/Implementation type map validation has been added to the non-generic registration methods.
- `InjectionParameter` has been replaced with `KeyValuePair<string, object>`.
- `IserviceRegistration` interface has been removed, only it's implementation remained.
- Removed the legacy container extension functionality.
- Removed the support of PCL v259.
    ]]>
    </PackageReleaseNotes>
    <Configurations>Debug;Release;Benchmark</Configurations>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Benchmark'">
    <AssemblyName>Stashbox.Benchmark</AssemblyName>
    <AssemblyTitle>Stashbox.Benchmark</AssemblyTitle>
    <RootNamespace>Stashbox.Benchmark</RootNamespace>
    <Optimize>true</Optimize>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
    <AssemblyTitle>Stashbox .NET Standard 1.0</AssemblyTitle>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
    <AssemblyTitle>Stashbox .NET Standard 1.3</AssemblyTitle>
    <DefineConstants>IL_EMIT</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <AssemblyTitle>Stashbox .NET Standard 2.0</AssemblyTitle>
    <DefineConstants>IL_EMIT;HAS_SERVICEPROVIDER</DefineConstants>
  </PropertyGroup>  
  <PropertyGroup Condition="'$(TargetFramework)' == 'net40' Or '$(TargetFramework)' == 'net45'">
    <DefineConstants>IL_EMIT;HAS_SERVICEPROVIDER</DefineConstants>
  </PropertyGroup>
  
  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3' Or '$(TargetFramework)' == 'netstandard2.0'">
    <PackageReference Include="System.Reflection.Emit" Version="4.3.0" />
    <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.3.0" />
  </ItemGroup>

  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <ItemGroup Condition="'$(OS)' == 'Windows_NT'">
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\LICENSE" Pack="true" PackagePath="" />
    <None Include="..\img\icon.png" Pack="true" PackagePath="" />
  </ItemGroup>
</Project>